package cn.iocoder.yudao.module.bpm.service.task;import cn.hutool.core.collection.CollUtil;import cn.hutool.core.util.ArrayUtil;import cn.hutool.core.util.NumberUtil;import cn.hutool.core.util.StrUtil;import cn.iocoder.yudao.framework.common.pojo.PageResult;import cn.iocoder.yudao.framework.common.util.collection.CollectionUtils;import cn.iocoder.yudao.framework.common.util.date.DateUtils;import cn.iocoder.yudao.framework.common.util.json.JsonUtils;import cn.iocoder.yudao.framework.common.util.object.BeanUtils;import cn.iocoder.yudao.framework.common.util.object.PageUtils;import cn.iocoder.yudao.module.bpm.api.task.dto.BpmProcessInstanceCreateReqDTO;import cn.iocoder.yudao.module.bpm.controller.admin.definition.vo.model.simple.BpmSimpleModelNodeVO;import cn.iocoder.yudao.module.bpm.controller.admin.task.vo.instance.*;import cn.iocoder.yudao.module.bpm.controller.admin.task.vo.instance.BpmProcessInstanceProgressRespVO.ApproveTaskInfo;import cn.iocoder.yudao.module.bpm.convert.task.BpmProcessInstanceConvert;import cn.iocoder.yudao.module.bpm.dal.dataobject.definition.BpmProcessDefinitionInfoDO;import cn.iocoder.yudao.module.bpm.enums.definition.BpmModelTypeEnum;import cn.iocoder.yudao.module.bpm.enums.definition.BpmSimpleModelNodeType;import cn.iocoder.yudao.module.bpm.enums.task.BpmProcessInstanceStatusEnum;import cn.iocoder.yudao.module.bpm.enums.task.BpmReasonEnum;import cn.iocoder.yudao.module.bpm.framework.flowable.core.candidate.BpmTaskCandidateInvoker;import cn.iocoder.yudao.module.bpm.framework.flowable.core.candidate.BpmTaskCandidateStrategy;import cn.iocoder.yudao.module.bpm.framework.flowable.core.candidate.strategy.BpmTaskCandidateStartUserSelectStrategy;import cn.iocoder.yudao.module.bpm.framework.flowable.core.enums.BpmnVariableConstants;import cn.iocoder.yudao.module.bpm.framework.flowable.core.event.BpmProcessInstanceEventPublisher;import cn.iocoder.yudao.module.bpm.framework.flowable.core.util.BpmnModelUtils;import cn.iocoder.yudao.module.bpm.framework.flowable.core.util.FlowableUtils;import cn.iocoder.yudao.module.bpm.framework.flowable.core.util.SimpleModelUtils;import cn.iocoder.yudao.module.bpm.service.definition.BpmProcessDefinitionService;import cn.iocoder.yudao.module.bpm.service.message.BpmMessageService;import cn.iocoder.yudao.module.bpm.service.task.bo.AlreadyRunApproveNodeRespBO;import cn.iocoder.yudao.module.system.api.user.AdminUserApi;import cn.iocoder.yudao.module.system.api.user.dto.AdminUserRespDTO;import jakarta.annotation.Resource;import jakarta.validation.Valid;import lombok.extern.slf4j.Slf4j;import org.flowable.bpmn.model.BpmnModel;import org.flowable.bpmn.model.UserTask;import org.flowable.engine.HistoryService;import org.flowable.engine.RuntimeService;import org.flowable.engine.history.HistoricActivityInstance;import org.flowable.engine.history.HistoricProcessInstance;import org.flowable.engine.history.HistoricProcessInstanceQuery;import org.flowable.engine.repository.ProcessDefinition;import org.flowable.engine.runtime.ProcessInstance;import org.flowable.task.api.history.HistoricTaskInstance;import org.springframework.context.annotation.Lazy;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import org.springframework.validation.annotation.Validated;import java.util.*;import static cn.iocoder.yudao.framework.common.exception.util.ServiceExceptionUtil.exception;import static cn.iocoder.yudao.module.bpm.controller.admin.task.vo.instance.BpmProcessInstanceProgressRespVO.ApproveNodeInfo;import static cn.iocoder.yudao.module.bpm.controller.admin.task.vo.instance.BpmProcessInstanceProgressRespVO.User;import static cn.iocoder.yudao.module.bpm.enums.ErrorCodeConstants.*;import static cn.iocoder.yudao.module.bpm.enums.definition.BpmSimpleModelNodeType.*;import static cn.iocoder.yudao.module.bpm.enums.definition.BpmUserTaskApproveTypeEnum.USER;import static cn.iocoder.yudao.module.bpm.enums.task.BpmTaskStatusEnum.APPROVE;import static cn.iocoder.yudao.module.bpm.enums.task.BpmTaskStatusEnum.NOT_START;import static cn.iocoder.yudao.module.bpm.framework.flowable.core.enums.BpmnModelConstants.START_USER_NODE_ID;/** * 流程实例 Service 实现类 * <p> * ProcessDefinition & ProcessInstance & Execution & Task 的关系： * 1. <a href="https://blog.csdn.net/bobozai86/article/details/105210414" /> * <p> * HistoricProcessInstance & ProcessInstance 的关系： * 1. <a href=" https://my.oschina.net/843294669/blog/71902" /> * <p> * 简单来说，前者 = 历史 + 运行中的流程实例，后者仅是运行中的流程实例 * * @author 芋道源码 */@Service@Validated@Slf4jpublic class BpmProcessInstanceServiceImpl implements BpmProcessInstanceService {    @Resource    private RuntimeService runtimeService;    @Resource    private HistoryService historyService;    @Resource    private BpmActivityService activityService;    @Resource    private BpmProcessDefinitionService processDefinitionService;    @Resource    @Lazy // 避免循环依赖    private BpmTaskService taskService;    @Resource    private BpmMessageService messageService;    @Resource    private BpmTaskCandidateInvoker bpmTaskCandidateInvoker;    @Resource    private AdminUserApi adminUserApi;    @Resource    private BpmProcessInstanceEventPublisher processInstanceEventPublisher;    // ========== Query 查询相关方法 ==========    @Override    public ProcessInstance getProcessInstance(String id) {        return runtimeService.createProcessInstanceQuery()                .includeProcessVariables()                .processInstanceId(id)                .singleResult();    }    @Override    public List<ProcessInstance> getProcessInstances(Set<String> ids) {        return runtimeService.createProcessInstanceQuery().processInstanceIds(ids).list();    }    @Override    public HistoricProcessInstance getHistoricProcessInstance(String id) {        return historyService.createHistoricProcessInstanceQuery().processInstanceId(id).includeProcessVariables().singleResult();    }    @Override    public List<HistoricProcessInstance> getHistoricProcessInstances(Set<String> ids) {        return historyService.createHistoricProcessInstanceQuery().processInstanceIds(ids).list();    }    @Override    public PageResult<HistoricProcessInstance> getProcessInstancePage(Long userId,                                                                      BpmProcessInstancePageReqVO pageReqVO) {        // 通过 BpmProcessInstanceExtDO 表，先查询到对应的分页        HistoricProcessInstanceQuery processInstanceQuery = historyService.createHistoricProcessInstanceQuery()                .includeProcessVariables()                .processInstanceTenantId(FlowableUtils.getTenantId())                .orderByProcessInstanceStartTime().desc();        if (userId != null) { // 【我的流程】菜单时，需要传递该字段            processInstanceQuery.startedBy(String.valueOf(userId));        } else if (pageReqVO.getStartUserId() != null) { // 【管理流程】菜单时，才会传递该字段            processInstanceQuery.startedBy(String.valueOf(pageReqVO.getStartUserId()));        }        if (StrUtil.isNotEmpty(pageReqVO.getName())) {            processInstanceQuery.processInstanceNameLike("%" + pageReqVO.getName() + "%");        }        if (StrUtil.isNotEmpty(pageReqVO.getProcessDefinitionId())) {            processInstanceQuery.processDefinitionId("%" + pageReqVO.getProcessDefinitionId() + "%");        }        if (StrUtil.isNotEmpty(pageReqVO.getCategory())) {            processInstanceQuery.processDefinitionCategory(pageReqVO.getCategory());        }        if (pageReqVO.getStatus() != null) {            processInstanceQuery.variableValueEquals(BpmnVariableConstants.PROCESS_INSTANCE_VARIABLE_STATUS, pageReqVO.getStatus());        }        if (ArrayUtil.isNotEmpty(pageReqVO.getCreateTime())) {            processInstanceQuery.startedAfter(DateUtils.of(pageReqVO.getCreateTime()[0]));            processInstanceQuery.startedBefore(DateUtils.of(pageReqVO.getCreateTime()[1]));        }        // 查询数量        long processInstanceCount = processInstanceQuery.count();        if (processInstanceCount == 0) {            return PageResult.empty(processInstanceCount);        }        // 查询列表        List<HistoricProcessInstance> processInstanceList = processInstanceQuery.listPage(PageUtils.getStart(pageReqVO), pageReqVO.getPageSize());        return new PageResult<>(processInstanceList, processInstanceCount);    }    @Override    public Map<String, String> getProcessInstanceFormFieldsPermission(BpmProcessInstanceFormFieldsPermissionReqVO reqVO) {        HistoricProcessInstance processInstance = getHistoricProcessInstance(reqVO.getId());        // 1.1 查询流程实例. 不存在返回 null        if (processInstance == null) {            return null;        }        // 1.2 通过流程活动编号        String activityId = reqVO.getActivityId();        if (StrUtil.isEmpty(activityId) && StrUtil.isNotEmpty(reqVO.getTaskId())) { // 流程活动 Id 为空。从流程任务中获取流程活动 Id            activityId = Optional.ofNullable(taskService.getHistoricTask(reqVO.getTaskId()))                    .map(HistoricTaskInstance::getTaskDefinitionKey).orElse(null);        }        if (StrUtil.isEmpty(activityId)) {            return null;        }        // 2. 从 BpmnModel 中解析表单字段权限        return BpmnModelUtils.parseFormFieldsPermission(                processDefinitionService.getProcessDefinitionBpmnModel(processInstance.getProcessDefinitionId()), activityId);    }    @Override    public BpmProcessInstanceProgressRespVO getProcessInstanceProgress(String id) {        // 1. 获取流程实例信息        HistoricProcessInstance processInstance = getHistoricProcessInstance(id);        if (processInstance == null) {            return null;        }        // 2. 获取流程实例状态        Integer processInstanceStatus = FlowableUtils.getProcessInstanceStatus(processInstance);        BpmProcessInstanceProgressRespVO respVO = new BpmProcessInstanceProgressRespVO()                .setStatus(processInstanceStatus);        // 3. 构建已运行节点的审批信息        List<HistoricActivityInstance> historicActivityList = activityService.getActivityListByProcessInstanceId(                processInstance.getId());        AlreadyRunApproveNodeRespBO respBO = buildAlreadyRunApproveNodes(processInstance.getId(), historicActivityList);        if (BpmProcessInstanceStatusEnum.isProcessEndStatus(processInstanceStatus)) { // 流程已经结束            respVO.setApproveNodeList(respBO.getApproveNodeList());        } else {            // 区分 BPMN 设计器 和 SIMPLE 设计器            BpmProcessDefinitionInfoDO processDefinitionInfo = processDefinitionService.getProcessDefinitionInfo(                    processInstance.getProcessDefinitionId());            if (Objects.equals(BpmModelTypeEnum.SIMPLE.getType(), processDefinitionInfo.getModelType())) {                // 4.1 仿钉钉流程设计器， 构建未运行节点的审批信息                List<ApproveNodeInfo> approveNodeList = respBO.getApproveNodeList();                BpmSimpleModelNodeVO simpleModel = JsonUtils.parseObject(processDefinitionInfo.getSimpleModel(), BpmSimpleModelNodeVO.class);                List<ApproveNodeInfo> notRunApproveNodes = new ArrayList<>();                traverseSimpleModelNodeToBuildNotRunApproveNodes(processInstance.getId(), simpleModel, respBO.getRunNodeIds(), notRunApproveNodes);                approveNodeList.addAll(notRunApproveNodes);                respVO.setApproveNodeList(approveNodeList);            } else if (Objects.equals(BpmModelTypeEnum.BPMN.getType(), processDefinitionInfo.getModelType())) {                // TODO Bpmn 设计器， 构建未运行节点的审批信息                respVO.setApproveNodeList(respBO.getApproveNodeList());            }        }        return respVO;    }    /**     *  遍历 SIMPLE 设计器模型 构建未运行节点的审批信息     *     * @param processInstanceId 流程实例 Id     * @param simpleModelNode  SIMPLE 设计器模型     * @param runNodeIds 已经运行节点的 Ids     * @param approveNodeList 未运行节点的审批信息列表     */    private void traverseSimpleModelNodeToBuildNotRunApproveNodes(String processInstanceId, BpmSimpleModelNodeVO simpleModelNode            , Set<String> runNodeIds, List<ApproveNodeInfo> approveNodeList) {        if (!SimpleModelUtils.isValidNode(simpleModelNode)) {            return;        }        buildNotRunApproveNodes(processInstanceId, simpleModelNode, runNodeIds, approveNodeList);        // 如果有子节点递归遍历子节点        traverseSimpleModelNodeToBuildNotRunApproveNodes(processInstanceId, simpleModelNode.getChildNode(), runNodeIds, approveNodeList);    }    private void buildNotRunApproveNodes(String processInstanceId, BpmSimpleModelNodeVO node, Set<String> runNodeIds, List<ApproveNodeInfo> approveNodeList) {        if (!runNodeIds.contains(node.getId())) {            // 节点未运行。需要进行预测            // 1. 对需要人工审批的审批节点。进行预测            if (APPROVE_NODE.getType().equals(node.getType()) && USER.getType().equals(node.getApproveType())) {                ApproveNodeInfo nodeProgress = new ApproveNodeInfo();                nodeProgress.setNodeType(node.getType());                nodeProgress.setName(node.getName());                nodeProgress.setStatus(NOT_START.getStatus());                nodeProgress.setCandidateUserList(getNotRunTaskCandidateUserList(processInstanceId, node.getCandidateStrategy(), node.getCandidateParam()));                approveNodeList.add(nodeProgress);            }            // 2. 对分支节点进行预测            if (BpmSimpleModelNodeType.isBranchNode(node.getType())) {                //  并行分支。不用预测条件。所有分支都需要遍历                if (PARALLEL_BRANCH_NODE.getType().equals(node.getType())) {                    node.getConditionNodes().forEach(conditionNode ->                            traverseSimpleModelNodeToBuildNotRunApproveNodes(processInstanceId, conditionNode.getChildNode()                                    , runNodeIds, approveNodeList)                    );                }                // TODO 条件分支如何预测待研究            }            // 3. 结束节点            if (END_NODE.getType().equals(node.getType())) {                ApproveNodeInfo nodeProgress = new ApproveNodeInfo();                nodeProgress.setNodeType(node.getType());                nodeProgress.setName(node.getName());                nodeProgress.setStatus(NOT_START.getStatus());                approveNodeList.add(nodeProgress);            }        } else {            // 节点已经运行。如果是分支节点。需要检查分支节点的运行情况            if (BpmSimpleModelNodeType.isBranchNode(node.getType()) && ArrayUtil.isNotEmpty(node.getConditionNodes())) {                node.getConditionNodes().forEach(conditionNode -> {                    // 只有运行的条件，才需要遍历                    if (runNodeIds.contains(conditionNode.getId())) {                        traverseSimpleModelNodeToBuildNotRunApproveNodes(processInstanceId, conditionNode.getChildNode()                                , runNodeIds, approveNodeList);                    }                });            }        }    }    /**     * 从已经运行活动节点构建的审批信息列表     *     * @param processInstanceId  流程实例 Id     * @param historicActivityList 已经运行活动     */    private AlreadyRunApproveNodeRespBO buildAlreadyRunApproveNodes(String processInstanceId,                                                                    List<HistoricActivityInstance> historicActivityList) {        // 待处理活动  只有 "userTask"  和 "endEvent"。 活动需要处理        List<HistoricActivityInstance> pendingActivityNodes = new ArrayList<>();        // 运行的节点 activityId。        Set<String> runNodeIds = new HashSet<>();        // 1. 遍历所有已运行和运行中的活动。 获取待处理的活动        historicActivityList.forEach(activity -> {            runNodeIds.add(activity.getActivityId());            if (BpmSimpleModelNodeType.isRecordNode(activity.getActivityType())) {                pendingActivityNodes.add(activity);            }        });        // 2.1 获取已运行和运行中的任务        List<HistoricTaskInstance> taskList = taskService.getTaskListByProcessInstanceId(processInstanceId);        Map<String, HistoricTaskInstance> taskMap = CollectionUtils.convertMap(taskList, HistoricTaskInstance::getId);        // 2.2 获取加签的任务        Map<String, List<HistoricTaskInstance>> addSignTaskMap = CollectionUtils.convertMultiMap(                CollectionUtils.filterList(taskList, task -> StrUtil.isNotEmpty(task.getParentTaskId())), HistoricTaskInstance::getParentTaskId);        // 3. 转换为节点审批信息        List<ApproveNodeInfo> nodeProgressList = CollectionUtils.convertList(pendingActivityNodes, activity -> {            ApproveNodeInfo nodeProgress = new ApproveNodeInfo().setName(activity.getActivityName())                    .setId(activity.getId())                    .setStartTime(DateUtils.of(activity.getStartTime()))                    .setEndTime(DateUtils.of(activity.getEndTime()));            if (BPMN_USER_TASK_TYPE.equals(activity.getActivityType())) { // 用户任务                if (START_USER_NODE_ID.equals(activity.getActivityId())) {                    nodeProgress.setNodeType(START_USER_NODE.getType());                } else {                    nodeProgress.setNodeType(APPROVE_NODE.getType());                }                HistoricTaskInstance task = taskMap.get(activity.getTaskId());                nodeProgress.setStatus(FlowableUtils.getTaskStatus(task));                ApproveTaskInfo approveTask = convertApproveTaskInfo(task);                List<ApproveTaskInfo> approveTasks = CollUtil.newArrayList(approveTask);                // 处理加签任务                List<HistoricTaskInstance> addSignTasks = addSignTaskMap.get(activity.getTaskId());                if (CollUtil.isNotEmpty(addSignTasks)) {                    approveTasks.addAll(CollectionUtils.convertList(addSignTasks, this::convertApproveTaskInfo));                }                nodeProgress.setTasks(approveTasks);            } else if (END_NODE.getBpmnType().equals(activity.getActivityType())) {                nodeProgress.setNodeType(APPROVE_NODE.getType());                nodeProgress.setStatus(APPROVE.getStatus());            }            return nodeProgress;        });        return new AlreadyRunApproveNodeRespBO()                .setApproveNodeList(nodeProgressList)                .setRunNodeIds(runNodeIds);    }    private ApproveTaskInfo convertApproveTaskInfo(HistoricTaskInstance task) {        if (task == null) {            return null;        }        ApproveTaskInfo approveTask = BeanUtils.toBean(task, ApproveTaskInfo.class);        approveTask.setStatus(FlowableUtils.getTaskStatus(task));        approveTask.setReason(FlowableUtils.getTaskReason(task));        if (StrUtil.isNotEmpty(task.getAssignee())) {            AdminUserRespDTO adminUserResp = adminUserApi.getUser(NumberUtil.parseLong(task.getAssignee()));            approveTask.setAssigneeUser(BeanUtils.toBean(adminUserResp, User.class));        }        if (StrUtil.isNotEmpty(task.getOwner())) {            AdminUserRespDTO adminUserResp = adminUserApi.getUser(NumberUtil.parseLong(task.getOwner()));            approveTask.setOwnerUser(BeanUtils.toBean(adminUserResp, User.class));        }        return approveTask;    }    private List<User> getNotRunTaskCandidateUserList(String processInstanceId, Integer candidateStrategy,                                                      String candidateParam) {        BpmTaskCandidateStrategy taskCandidateStrategy = bpmTaskCandidateInvoker.getCandidateStrategy(candidateStrategy);        Set<Long> userIds = taskCandidateStrategy.calculateUsers(processInstanceId, candidateParam);        List<AdminUserRespDTO> userList = adminUserApi.getUserList(userIds);        return CollectionUtils.convertList(userList, item -> BeanUtils.toBean(item, User.class));    }    // ========== Update 写入相关方法 ==========    @Override    @Transactional(rollbackFor = Exception.class)    public String createProcessInstance(Long userId, @Valid BpmProcessInstanceCreateReqVO createReqVO) {        // 获得流程定义        ProcessDefinition definition = processDefinitionService.getProcessDefinition(createReqVO.getProcessDefinitionId());        // 发起流程        return createProcessInstance0(userId, definition, createReqVO.getVariables(), null,                createReqVO.getStartUserSelectAssignees());    }    @Override    public String createProcessInstance(Long userId, @Valid BpmProcessInstanceCreateReqDTO createReqDTO) {        // 获得流程定义        ProcessDefinition definition = processDefinitionService.getActiveProcessDefinition(createReqDTO.getProcessDefinitionKey());        // 发起流程        return createProcessInstance0(userId, definition, createReqDTO.getVariables(), createReqDTO.getBusinessKey(),                createReqDTO.getStartUserSelectAssignees());    }    private String createProcessInstance0(Long userId, ProcessDefinition definition,                                          Map<String, Object> variables, String businessKey,                                          Map<String, List<Long>> startUserSelectAssignees) {        // 1.1 校验流程定义        if (definition == null) {            throw exception(PROCESS_DEFINITION_NOT_EXISTS);        }        if (definition.isSuspended()) {            throw exception(PROCESS_DEFINITION_IS_SUSPENDED);        }        // 1.2 校验发起人自选审批人        validateStartUserSelectAssignees(definition, startUserSelectAssignees);        // 2. 创建流程实例        if (variables == null) {            variables = new HashMap<>();        }        FlowableUtils.filterProcessInstanceFormVariable(variables); // 过滤一下，避免 ProcessInstance 系统级的变量被占用        variables.put(BpmnVariableConstants.PROCESS_INSTANCE_VARIABLE_STATUS, // 流程实例状态：审批中                BpmProcessInstanceStatusEnum.RUNNING.getStatus());        if (CollUtil.isNotEmpty(startUserSelectAssignees)) {            variables.put(BpmnVariableConstants.PROCESS_INSTANCE_VARIABLE_START_USER_SELECT_ASSIGNEES, startUserSelectAssignees);        }        ProcessInstance instance = runtimeService.createProcessInstanceBuilder()                .processDefinitionId(definition.getId())                .businessKey(businessKey)                .name(definition.getName().trim())                .variables(variables)                .start();        return instance.getId();    }    private void validateStartUserSelectAssignees(ProcessDefinition definition, Map<String, List<Long>> startUserSelectAssignees) {        // 1. 获得发起人自选审批人的 UserTask 列表        BpmnModel bpmnModel = processDefinitionService.getProcessDefinitionBpmnModel(definition.getId());        List<UserTask> userTaskList = BpmTaskCandidateStartUserSelectStrategy.getStartUserSelectUserTaskList(bpmnModel);        if (CollUtil.isEmpty(userTaskList)) {            return;        }        // 2. 校验发起人自选审批人的 UserTask 是否都配置了        userTaskList.forEach(userTask -> {            List<Long> assignees = startUserSelectAssignees != null ? startUserSelectAssignees.get(userTask.getId()) : null;            if (CollUtil.isEmpty(assignees)) {                throw exception(PROCESS_INSTANCE_START_USER_SELECT_ASSIGNEES_NOT_CONFIG, userTask.getName());            }            Map<Long, AdminUserRespDTO> userMap = adminUserApi.getUserMap(assignees);            assignees.forEach(assignee -> {                if (userMap.get(assignee) == null) {                    throw exception(PROCESS_INSTANCE_START_USER_SELECT_ASSIGNEES_NOT_EXISTS, userTask.getName(), assignee);                }            });        });    }    @Override    public void cancelProcessInstanceByStartUser(Long userId, @Valid BpmProcessInstanceCancelReqVO cancelReqVO) {        // 1.1 校验流程实例存在        ProcessInstance instance = getProcessInstance(cancelReqVO.getId());        if (instance == null) {            throw exception(PROCESS_INSTANCE_CANCEL_FAIL_NOT_EXISTS);        }        // 1.2 只能取消自己的        if (!Objects.equals(instance.getStartUserId(), String.valueOf(userId))) {            throw exception(PROCESS_INSTANCE_CANCEL_FAIL_NOT_SELF);        }        // 2. 取消流程        updateProcessInstanceCancel(cancelReqVO.getId(),                BpmReasonEnum.CANCEL_PROCESS_INSTANCE_BY_START_USER.format(cancelReqVO.getReason()));    }    @Override    public void cancelProcessInstanceByAdmin(Long userId, BpmProcessInstanceCancelReqVO cancelReqVO) {        // 1.1 校验流程实例存在        ProcessInstance instance = getProcessInstance(cancelReqVO.getId());        if (instance == null) {            throw exception(PROCESS_INSTANCE_CANCEL_FAIL_NOT_EXISTS);        }        // 2. 取消流程        AdminUserRespDTO user = adminUserApi.getUser(userId);        updateProcessInstanceCancel(cancelReqVO.getId(),                BpmReasonEnum.CANCEL_PROCESS_INSTANCE_BY_ADMIN.format(user.getNickname(), cancelReqVO.getReason()));    }    private void updateProcessInstanceCancel(String id, String reason) {        // 1. 更新流程实例 status        runtimeService.setVariable(id, BpmnVariableConstants.PROCESS_INSTANCE_VARIABLE_STATUS,                BpmProcessInstanceStatusEnum.CANCEL.getStatus());        runtimeService.setVariable(id, BpmnVariableConstants.PROCESS_INSTANCE_VARIABLE_REASON, reason);        // 2. 结束流程        taskService.moveTaskToEnd(id);    }    @Override    public void updateProcessInstanceReject(ProcessInstance processInstance, String reason) {        runtimeService.setVariable(processInstance.getProcessInstanceId(), BpmnVariableConstants.PROCESS_INSTANCE_VARIABLE_STATUS,                BpmProcessInstanceStatusEnum.REJECT.getStatus());        runtimeService.setVariable(processInstance.getProcessInstanceId(), BpmnVariableConstants.PROCESS_INSTANCE_VARIABLE_REASON,                BpmReasonEnum.REJECT_TASK.format(reason));    }    // ========== Event 事件相关方法 ==========    @Override    public void processProcessInstanceCompleted(ProcessInstance instance) {        // 注意：需要基于 instance 设置租户编号，避免 Flowable 内部异步时，丢失租户编号        FlowableUtils.execute(instance.getTenantId(), () -> {            // 1.1 获取当前状态            Integer status = (Integer) instance.getProcessVariables().get(BpmnVariableConstants.PROCESS_INSTANCE_VARIABLE_STATUS);            String reason = (String) instance.getProcessVariables().get(BpmnVariableConstants.PROCESS_INSTANCE_VARIABLE_REASON);            // 1.2 当流程状态还是审批状态中，说明审批通过了，则变更下它的状态            // 为什么这么处理？因为流程完成，并且完成了，说明审批通过了            if (Objects.equals(status, BpmProcessInstanceStatusEnum.RUNNING.getStatus())) {                status = BpmProcessInstanceStatusEnum.APPROVE.getStatus();                runtimeService.setVariable(instance.getId(), BpmnVariableConstants.PROCESS_INSTANCE_VARIABLE_STATUS, status);            }            // 2. 发送对应的消息通知            if (Objects.equals(status, BpmProcessInstanceStatusEnum.APPROVE.getStatus())) {                messageService.sendMessageWhenProcessInstanceApprove(BpmProcessInstanceConvert.INSTANCE.buildProcessInstanceApproveMessage(instance));            } else if (Objects.equals(status, BpmProcessInstanceStatusEnum.REJECT.getStatus())) {                messageService.sendMessageWhenProcessInstanceReject(                        BpmProcessInstanceConvert.INSTANCE.buildProcessInstanceRejectMessage(instance, reason));            }            // 3. 发送流程实例的状态事件            processInstanceEventPublisher.sendProcessInstanceResultEvent(                    BpmProcessInstanceConvert.INSTANCE.buildProcessInstanceStatusEvent(this, instance, status));        });    }}