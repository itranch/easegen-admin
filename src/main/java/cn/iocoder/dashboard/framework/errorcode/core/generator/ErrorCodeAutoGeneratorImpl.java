package cn.iocoder.dashboard.framework.errorcode.core.generator;

import cn.iocoder.dashboard.common.exception.ErrorCode;
import cn.iocoder.dashboard.framework.errorcode.core.dto.ErrorCodeAutoGenerateReqDTO;
import cn.iocoder.dashboard.framework.errorcode.core.service.ErrorCodeFrameworkService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.context.event.ApplicationReadyEvent;
import org.springframework.context.event.EventListener;
import org.springframework.scheduling.annotation.Async;
import org.springframework.util.StringUtils;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * ErrorCodeAutoGenerator 的实现类
 * 目的是，扫描指定的 {@link #errorCodeConstantsClass} 类，写入到 system 的数据库中
 *
 * @author dylan
 */
@RequiredArgsConstructor
@Slf4j
public class ErrorCodeAutoGeneratorImpl implements ErrorCodeAutoGenerator {

    /**
     * 应用分组
     */
    private final String applicationName;
    /**
     * 错误码枚举类
     */
    private final String errorCodeConstantsClass;
    /**
     * 错误码 Service
     */
    private final ErrorCodeFrameworkService errorCodeService;

    @Override
    @EventListener(ApplicationReadyEvent.class)
    @Async // 异步，保证项目的启动过程，毕竟非关键流程
    public void execute() {
        // 第一步，获得错误码类
        Class<?> errorCodeConstantsClazz = parseErrorCodeConstantsClass();
        if (errorCodeConstantsClazz == null) {
            return;
        }

        // 第二步，获得错误码数组
        List<ErrorCodeAutoGenerateReqDTO> autoGenerateDTOs = parseErrorCode(errorCodeConstantsClazz);
        log.info("[execute][解析到错误码数量为 ({}) 个]", autoGenerateDTOs.size());

        // 第三步，写入到 system 的数据库
        errorCodeService.autoGenerateErrorCodes(autoGenerateDTOs);
        log.info("[execute][写入到 system 组件完成]");
    }

    /**
     * 解析 errorCodeConstantsClass 变量，获得错误码类
     *
     * @return 错误码类
     */
    private Class<?> parseErrorCodeConstantsClass() {
        // 校验 errorCodeConstantsClass 参数
        if (!StringUtils.hasText(errorCodeConstantsClass)) {
            log.info("[execute][未配置 yudao.error-code.constants-class 配置项，不进行自动写入到当前服务中]");
            return null;
        }
        try {
            return Class.forName(errorCodeConstantsClass);
        } catch (ClassNotFoundException e) {
            log.error("[execute][配置的 ({}) 找不到对应的类]", errorCodeConstantsClass);
            return null;
        }
    }

    /**
     * 解析错误码类，获得错误码数组
     *
     * @return 错误码数组
     */
    private List<ErrorCodeAutoGenerateReqDTO> parseErrorCode(Class<?> errorCodeConstantsClazz) {
        List<ErrorCodeAutoGenerateReqDTO> autoGenerateDTOs = new ArrayList<>();
        Arrays.stream(errorCodeConstantsClazz.getFields()).forEach(field -> {
            if (field.getType() != ErrorCode.class) {
                return;
            }
            try {
                ErrorCode errorCode = (ErrorCode) field.get(errorCodeConstantsClazz);
                autoGenerateDTOs.add(new ErrorCodeAutoGenerateReqDTO().setApplicationName(applicationName)
                        .setCode(errorCode.getCode()).setMessage(errorCode.getMsg()));
            } catch (IllegalAccessException e) {
                throw new RuntimeException(e);
            }
        });
        return autoGenerateDTOs;
    }

}

